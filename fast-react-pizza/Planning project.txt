Planning project:
1) Gather application requirements and features

2) Divide the application into pages
-> Think about the overall and page-level UI
-> Break the desired UI into components
-> Design and build a static version (no state yet)

3) Divide the aopplication into feature categories
-> Think about state management + data flow

4) Decide on what libraries to use (technology decisions) -> Refering to us being able to decide which tech stack we can use



Requirements: 
- Very simple application, where users can order one or more pizzas from a menu
- No account needs, No account or login ( inputs are just their names and phoine number beofre using the app )
- The menu can change, so it should be loaded from an API
- Users can add multiple pizzaz to a cart before ordering
- Ordering requires user's name, phone and address
- Add GPS location should also be provided to make delivery easier
- User's can mark their order as "priority" for an additional 20% of the cart price
- Orders can made by sending POST request with the order data (user data + selected pizzas) to the API
- Payments are made on delivery, so no payment processing is necessary in the app
- Each order will get a unique ID that should be displayed, so the user can later look up their order based on the ID
- Users should be able to mark their order as "priority" order even after it has been placed

After gathering Requirements:
Feature Breakdown
Feature Categories:
- User
- Menu
- Cart
- Order

Necessary Pages:
- Homepage -- / --- (User Feature) -> state Global UI
- Pizza Menu -- /menu --- (Menu Feature) -> state Global remote
- Cart -- /cart --- (Cart Feature) -> state Global UI
- Placing a new order -- /order/new --- (Order Feature) -> state Global remote 
- Looking up an order -- /order/:orderID --- (Order Feature) -> state Global remote

Tech Stack
-> Routing - React router
-> Styling - tailwindcss
-> Remote state management - React Router v6.4+
-> UI State management - Redux